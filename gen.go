// +build ignore

package main

import (
	"bytes"
	"crypto/md5"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

const hashFile = ".certshash"

const masterTemplateString = string(
	`// Code generated by go generate; DO NOT EDIT
// {{ .Timestamp }}
// {{ .URL }}

package certy

//go:generate go run gen.go

import (
)

var Certs []byte = {{ .Bundle }}`,
)

var masterTemplate = template.Must(
	template.New("master").Parse(masterTemplateString),
)

func main() {
	var prevHash []byte
	if _, err := os.Stat(hashFile); !os.IsNotExist(err) {
		prevHash, _ = ioutil.ReadFile(hashFile)
	}
	const url = "https://mkcert.org/generate"
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	if resp.StatusCode != 200 {
		log.Fatal("Expected 200 while requesting certs, got:", resp.StatusCode)
	}
	defer resp.Body.Close()

	bundleData, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("Error while reading body:", err)
	}
	newHash := md5.Sum(bundleData)

	if bytes.Equal(newHash[:], prevHash) {
		log.Print("Certificates unchanged. Skipping generation...")
		os.Exit(0)
	}

	file, err := os.Create("generated_certs.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	err = masterTemplate.Execute(file, struct {
		Timestamp time.Time
		URL       string
		Bundle    string
	}{
		Timestamp: time.Now(),
		URL:       url,
		Bundle:    fmt.Sprintf("%#v", bundleData),
	})
	if err != nil {
		log.Fatal("Error while writing template:", err)
	}

	err = ioutil.WriteFile(hashFile, newHash[:], 0644)
	if err != nil {
		log.Print("Error while writing hash:", err)
	}

	os.Exit(0)
}
